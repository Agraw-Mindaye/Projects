#include <iostream>
using namespace std;
struct Node
{
    int num;
    Node *nxt;
};

Node *strt = NULL;

//Check to see if list is empty
bool empty()
{
    if(strt == NULL)
    {
        return true;
    }
    else
    {
        return false;
    }
}

int counter = 0;

//Create function 
void create()
{
    if(counter != 0)
    {
        cout << "Link List has already been created" << endl << endl;
    }
    else
    {
        cout << "Link List is created" << endl << endl;
        counter++;
    }
}

//Checks for duplicate node
int duplicate(int x)
{
    Node *temp = strt;
    int counter = 0;
    
    if(temp != NULL && temp->num == x)
    {
        counter++;
    }
    else 
    {
        while(temp != NULL && temp->num != x)
        {
            temp = temp->nxt;
        }

        if(temp != NULL)
        {
            counter++;
        }
    }
    return counter;
}

//Add node to the beginning of list
void add_beg(int x)
{
    Node *ptr = new Node;
    ptr->num = x;
    ptr->nxt = strt;
    strt = ptr;
}

//Add node to the middle or the end of the linked list
void add_mid_or_end(int x)
{
    Node *temp1 = strt;
    Node *temp2;
    Node *ptr = new Node;
    ptr->num = x;

    int counter = 0;
    
    //Add node to middle of list
    if(temp1->num < x && temp1->nxt != NULL)
    {
        while(temp1->nxt != NULL && temp1->num < x)
        {
            temp2 = temp1;
            temp1 = temp1->nxt;
        }

        if(temp1 != NULL && temp1->num > x)
        {
            ptr->nxt = temp1;
            temp2->nxt = ptr;

            counter++;
        }
    }

    //Add node to end of list
    if(counter == 0)
    {
        ptr->nxt = NULL;

        if(strt == NULL)
        {
            strt = ptr;
        }
        else
        {
            while(temp1->nxt != NULL)
            {
                temp1 = temp1->nxt;
            }

            temp1->nxt = ptr;
        }

    } 
}

//Add node function
void add_node(int x)
{
    Node *temp = strt;

    if(empty())
    {
        add_beg(x);
    }
    else if(temp != NULL && temp->num > x)
    {
        add_beg(x);
    }
    else 
    {
        add_mid_or_end(x);
    }
}

//Delete node function
void delete_node(int x)
{
    Node *temp1 = strt; 
    Node *temp2 = NULL;

    if(temp1 != NULL && temp1->num == x)
    {
        strt = temp1->nxt;
        delete temp1;
    }
    else
    {
        while(temp1 != NULL && temp1->num != x)
        {
            temp2 = temp1;
            temp1 = temp1->nxt;
        }

        if(temp1 != NULL)
        {
            temp2->nxt = temp1->nxt;
            delete temp1;
        }
        else
        {
            cout << "Number does not exist" << endl << endl;
        }
    }
}

//Modify an existing node
void modify(int x)
{
    Node *temp = strt;
    double new_num;

    if(temp != NULL && temp->num == x)
    {
        cout << "Enter the new number: ";
        cin >> new_num;

        cout << "Old value: " << x << endl;
        cout << "New value: " << new_num << endl << endl;
        temp->num = new_num;
        
    }
    else
    {
        while(temp != NULL && temp->num !=x)
        {
            temp = temp->nxt;
        }
        if(temp != NULL)
        {
            cout << "Enter the new number: ";
            cin >> new_num;

            cout << "Old value: " << x << endl;
            cout << "New value: " << new_num << endl << endl;
            temp->num = new_num;
        }
        else
        {
            cout << "Errror: Number does not exist" << endl << endl;
        }
    }
}

//Search for an existing node
void search_node(int x)
{
    Node *temp = strt; 

    while(temp != NULL && temp->num !=x)
    {
        temp = temp->nxt;
    }

    if(temp != NULL)
    {
        cout << "Node searched for: " << x << endl;
        cout << "Next node: " << temp->nxt << endl << endl;
    }
    else
    {
        cout << "Number does not exist" << endl << endl;
    }
}

//Display linked list
void display()
{
    Node *temp = strt;

    if(empty())
    {
        cout << "List: (empty)" << endl;
    }
    else
    {
        cout << "List: ";
        while(temp != NULL)
        {
            cout << temp->num << "  ";
            temp = temp->nxt;
        }
    }
    cout << endl << endl;
}

//Delete entire list
void purge()
{
    Node *temp1 = strt;
    Node *temp2 = NULL;

    while(temp1 != NULL)
    {
        temp2 = temp1->nxt;
        delete temp1;
        temp1 = temp2;
    }

    strt = NULL;
}

//Menu for user input
void menu()
{
    cout << "1. Create a LL" << endl;
    cout << "2. Add" << endl;
    cout << "3. Delete" << endl;
    cout << "4. Search for a Node" << endl;
    cout << "5. Modify a Node" << endl;
    cout << "6. Display List" << endl;
    cout << "7. Purge List" << endl;
    cout << "8. Exit" << endl;
    cout << endl;
}

int main()
{
    int num, choice;

    menu();

    do
    {
        cout << "Choose an option from the menu: ";
        cin >> choice;
        switch(choice)
        {
            case 1:
            { 
                create();
                menu();
                break;
            }
            case 2:
            {
                cout << "Enter the number to add to the list: ";
                cin >> num;
                int same_num = duplicate(num);
                if(same_num != 0)
                {
                    cout << "ERROR: Number already exists in list. Try again." << endl << endl;
                }
                else
                {
                    add_node(num);
                    cout << endl;
                }
                display();
                menu();
                break;
            }
            case 3:
            {
                if(empty())
                {
                    cout << "Cannot delete, list is empty" << endl << endl;
                }
                else
                {
                    cout << "Enter the number to delete from the list: ";
                    cin >> num;
                    delete_node(num);
                    cout << endl;
                }   
                display();
                menu();
                break;
            }
            case 4:
            {
                if(empty())
                {
                    cout << "Cannot search, list is empty" << endl << endl;
                }
                else
                {
                    cout << "Enter the number to search for in the list: ";
                    cin >> num;
                    search_node(num);
                }
                display();
                menu();
                break;
            }
            case 5:
            {
                if(empty())
                {
                    cout << "Cannot modify, list is empty" << endl << endl;
                }
                else
                {
                    cout << "Enter the number to modify: ";
                    cin >> num;
                    modify(num);
                }
                display();
                menu();
                break;
            }
            case 6:
            {
                display();
                menu();
                break;
            }
            case 7:
            {
                if(empty())
                {
                    cout << "Cannot purge, list is empty" << endl << endl;
                }
                else
                {
                    purge();
                    cout << "List has been purged" << endl << endl;
                }
                display();
                menu();
                break;
            }
            case 8:
            {
                cout << "Exiting..." << endl;
                break;
            }
            default: 
            {
                cout << "Error: Please choose an option from the menu" << endl << endl;
            }
        }
    }
    while(choice != 8);

    return 0;
}
